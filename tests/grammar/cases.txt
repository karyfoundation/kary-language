
── ────────────────────────────────────────────────────────────────────────────────
def x
── ────────────────────────────────────────────────────────────────────────────────
def x y
── ────────────────────────────────────────────────────────────────────────────────
def x y z
── ────────────────────────────────────────────────────────────────────────────────
def hello-world
── ────────────────────────────────────────────────────────────────────────────────
def x = 2
── ────────────────────────────────────────────────────────────────────────────────
export def x = 2
── ────────────────────────────────────────────────────────────────────────────────
def x = [ x y => (sum x y) ]
── ────────────────────────────────────────────────────────────────────────────────
def x y z
def m = 4
── ────────────────────────────────────────────────────────────────────────────────
export def x y
── ────────────────────────────────────────────────────────────────────────────────




── ────────────────────────────────────────────────────────────────────────────────
x/y/z = 2
── ────────────────────────────────────────────────────────────────────────────────
hello-world/hello-world = 5
── ────────────────────────────────────────────────────────────────────────────────




── ────────────────────────────────────────────────────────────────────────────────
x = "hello world"
── ────────────────────────────────────────────────────────────────────────────────
x = 'hello world'
── ────────────────────────────────────────────────────────────────────────────────
x = "hello #(sum 2 3) world"
── ────────────────────────────────────────────────────────────────────────────────
x = 'hello #(sum 2 3) world'
── ────────────────────────────────────────────────────────────────────────────────
x = "hello #(sum 5 4)"
── ────────────────────────────────────────────────────────────────────────────────
x = "#(sum 1 2)"
── ────────────────────────────────────────────────────────────────────────────────
x = '#(sum 1 2)'
── ────────────────────────────────────────────────────────────────────────────────
x = '#(sum 1 2)#(mul 1 2)'
── ────────────────────────────────────────────────────────────────────────────────




── ────────────────────────────────────────────────────────────────────────────────
x = [ ]
── ────────────────────────────────────────────────────────────────────────────────
x = [1 2 3]
── ────────────────────────────────────────────────────────────────────────────────
x = [1 (x) (z (y))]
── ────────────────────────────────────────────────────────────────────────────────
array x:
    (x) (y) (z) 23 "hello world"
end
── ────────────────────────────────────────────────────────────────────────────────
k = [ x/y/z | 4 ]
── ────────────────────────────────────────────────────────────────────────────────




── ────────────────────────────────────────────────────────────────────────────────
def contacts =
    |  #    | name    | middle-name | surname       | phone-number               |
    |-------|---------|-------------|---------------|----------------------------|
    | homer | "Homer" | "Jay"       | "Simpson"     | (get-phone-number "homer") |
    | bart  | "Bart"  |             | "Simpson"     | 666                        |
── ────────────────────────────────────────────────────────────────────────────────




── ────────────────────────────────────────────────────────────────────────────────
x = [:]
── ────────────────────────────────────────────────────────────────────────────────
x = [y: z]
── ────────────────────────────────────────────────────────────────────────────────
x = [i: j, k: m]
── ────────────────────────────────────────────────────────────────────────────────
x = [
    i: j
    k: m
]
── ────────────────────────────────────────────────────────────────────────────────
object kary:
    name: "Kary Foundation"
    place: "web"
end
── ────────────────────────────────────────────────────────────────────────────────
export object result:
    name: "something"
end
── ────────────────────────────────────────────────────────────────────────────────
k = [ x/y/z | "key" ]
── ────────────────────────────────────────────────────────────────────────────────
k = [ x/y/z | await (foo) ]
── ────────────────────────────────────────────────────────────────────────────────
con homer-surname = [ contacts | homer | surname ]
── ────────────────────────────────────────────────────────────────────────────────




── ────────────────────────────────────────────────────────────────────────────────
x = [ x y => (sum x y) ]
── ────────────────────────────────────────────────────────────────────────────────
x = [ x => not x > return ]
── ────────────────────────────────────────────────────────────────────────────────
x = [ x => return x ]
── ────────────────────────────────────────────────────────────────────────────────
x = [ x => return ]
── ────────────────────────────────────────────────────────────────────────────────




── ────────────────────────────────────────────────────────────────────────────────
def foo:
end
── ────────────────────────────────────────────────────────────────────────────────
def foo x:
end
── ────────────────────────────────────────────────────────────────────────────────
def foo x y:
end
── ────────────────────────────────────────────────────────────────────────────────
def foo x y z:
end
── ────────────────────────────────────────────────────────────────────────────────
def foo:
    (x)
end
── ────────────────────────────────────────────────────────────────────────────────
def foo:

end
── ────────────────────────────────────────────────────────────────────────────────
def foo x:

end
── ────────────────────────────────────────────────────────────────────────────────
def foo x y:

end
── ────────────────────────────────────────────────────────────────────────────────
def foo:
    return
end
── ────────────────────────────────────────────────────────────────────────────────
def foo x:
    (x) > return
end
── ────────────────────────────────────────────────────────────────────────────────
def x:
    export def y:
        async z:
            return
        end
    end
end
── ────────────────────────────────────────────────────────────────────────────────
async x:

end
── ────────────────────────────────────────────────────────────────────────────────




── ────────────────────────────────────────────────────────────────────────────────
(hello-world 2 3)
── ────────────────────────────────────────────────────────────────────────────────
(hello-world)
── ────────────────────────────────────────────────────────────────────────────────
(eq a b)
── ────────────────────────────────────────────────────────────────────────────────
(sum a b)
── ────────────────────────────────────────────────────────────────────────────────
(mul a b)
── ────────────────────────────────────────────────────────────────────────────────
(div a b)
── ────────────────────────────────────────────────────────────────────────────────
(mod a b)
── ────────────────────────────────────────────────────────────────────────────────
(= 11 (sum 5 6))
── ────────────────────────────────────────────────────────────────────────────────
(sub a b)
── ────────────────────────────────────────────────────────────────────────────────
not x
── ────────────────────────────────────────────────────────────────────────────────
await (x)
── ────────────────────────────────────────────────────────────────────────────────




── ────────────────────────────────────────────────────────────────────────────────
(a) -> (b) -> (c)
── ────────────────────────────────────────────────────────────────────────────────
(x)->(y)
── ────────────────────────────────────────────────────────────────────────────────
(a) -> return
── ────────────────────────────────────────────────────────────────────────────────
(x) -> (y) -> return
── ────────────────────────────────────────────────────────────────────────────────




── ────────────────────────────────────────────────────────────────────────────────
while eq a b:

end
── ────────────────────────────────────────────────────────────────────────────────
while eq a b:
    (hello)
end
── ────────────────────────────────────────────────────────────────────────────────
while on:

end
── ────────────────────────────────────────────────────────────────────────────────
while eq a b:

end
── ────────────────────────────────────────────────────────────────────────────────
while (x):

end
── ────────────────────────────────────────────────────────────────────────────────




── ────────────────────────────────────────────────────────────────────────────────
if on:

end
── ────────────────────────────────────────────────────────────────────────────────
unless off:

end
── ────────────────────────────────────────────────────────────────────────────────
if (x):

end
── ────────────────────────────────────────────────────────────────────────────────
unless (x):

end
── ────────────────────────────────────────────────────────────────────────────────
if (x):
    (y)
else
    (z)
end
── ────────────────────────────────────────────────────────────────────────────────
if x: end
── ────────────────────────────────────────────────────────────────────────────────
if (x):

end
── ────────────────────────────────────────────────────────────────────────────────
if (x):
    return (y)
else
    throw (z)
end
── ────────────────────────────────────────────────────────────────────────────────
if foo bar:

end
── ────────────────────────────────────────────────────────────────────────────────
if (x):
    return (x)
elif (y):
    (y)
else
    (z)
end
── ────────────────────────────────────────────────────────────────────────────────
if (x):
    (x)
elif (y):
    (y)
elif (z):
    (z)
else
    (w)
end
── ────────────────────────────────────────────────────────────────────────────────




── ────────────────────────────────────────────────────────────────────────────────
class foo:

end
── ────────────────────────────────────────────────────────────────────────────────
class foo:
    def bar:

    end
end
── ────────────────────────────────────────────────────────────────────────────────
export class foo:

end
── ────────────────────────────────────────────────────────────────────────────────
class x:
    def constructor:
        (do-something)
    end
    export async z:
        return (new (Promise [ res => (res) ]))
    end
end
── ────────────────────────────────────────────────────────────────────────────────
